# ============================================================================
#                            Start
# ============================================================================
[start]
command=:AsyncTask file-build-and-run

# ============================================================================
#                            Single file
# ============================================================================
[file-build]
command:c=gcc -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/a.out"
command:cpp=g++ -std=c++17 -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/a.out"
command:go=go build $(VIM_FILEPATH)
command:rust=cargo build
command:tex=:execute(b:vimtex.compiler.is_running() ? 'VimtexView' : 'VimtexCompile')
command:dockerfile=docker build .
cwd=$(VIM_FILEDIR)
errorformat=%f:%l:%m
output=quickfix
silent=1
notify=echo
save=2

[file-run]
command:go=go run .
command:javascript=node "$(VIM_FILEPATH)"
command:lua=lua "$(VIM_FILEPATH)"
command:make=make -f "$(VIM_FILEPATH)"
command:python=python "$(VIM_FILEPATH)"
command:rust=RUST_BACKTRACE=1 cargo run
command:sh=bash "$(VIM_FILEPATH)"
command:tex=:execute(b:vimtex.compiler.is_running() ? 'VimtexView' : 'VimtexCompile')
command:typescript=ts-node -T "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)
output=quickfix
# silent=1
notify=echo
save=2

[file-build-and-run]
command:c/linux=gcc -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/a.out" && "$(VIM_FILEDIR)/a.out"
command:cpp/linux=g++ -std=c++17 -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/a.out" && "$(VIM_FILEDIR)/a.out"
command:c/win32=gcc -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/a.exe" && "$(VIM_FILEDIR)/a.exe"
command:cpp/win32=g++ -std=c++17 -g -Wall "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/a.exe" && "$(VIM_FILEDIR)/a.exe"
command:dockerfile=docker build .
command:go=go run .
command:html=:BrowserOpen %
command:java=javac "$(VIM_FILEPATH)" && java "$(VIM_FILENOEXT)" && rm "$(VIM_PATHNOEXT).class"
command:javascript=node "$(VIM_FILEPATH)"
command:lua=lua "$(VIM_FILEPATH)"
command:make=make -f "$(VIM_FILEPATH)"
command:markdown=:MarkdownPreview
command:mysql=:%DB
command:post=:CocCommand post.do
command:python=python "$(VIM_FILEPATH)"
command:rust=RUST_BACKTRACE=1 cargo run
command:sh=bash "$(VIM_FILEPATH)"
command:sql=:%DB
command:tex=:execute(b:vimtex.compiler.is_running() ? 'VimtexView' : 'VimtexCompile')
command:typescript=ts-node -T "$(VIM_FILEPATH)"
command:vim=:source %
cwd=$(VIM_FILEDIR)
output=terminal
# silent=1
pos=terminal
focus=1
notify=echo
save=2

# ============================================================================
#                                Cmake
# ============================================================================
# CMakeLists.txt must be in $VIM_ROOT Or make sure g:asyncrun_rootmarkers
# includes `CMakeLists.txt`
# ----------------------------------------------------------------------------
[cmake-init]
command=mkdir -p build && cd build && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=YES .. && cp -f compile_commands.json ..
cwd=<root>
output=quickfix
silent=1
notify=echo
save=2

[cmake-reinit]
command=rm -rf build/ && mkdir -p build && cd build && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=YES .. && cp -f compile_commands.json ..
cwd=<root>
output=quickfix
silent=1
notify=echo
save=2

[cmake-build]
command=cmake --build build
cwd=<root>
output=quickfix
silent=0
notify=echo
save=2

[cmake-run]
command="$(VIM_ROOT)/build/$(VIM_PRONAME)"
cwd=<root>
output=quickfix
silent=1
notify=echo
save=2

[cmake-build-and-run]
command=cmake --build build && "$(VIM_ROOT)/build/$(VIM_PRONAME)"
cwd=<root>
# pos=tab
# focus=0
output=terminal
silent=1
notify=echo
save=2

[cmake-clean]
command=rm -rf build/
cwd=<root>
output=quickfix
silent=1
notify=echo
save=2

# ============================================================================
#                                Qmake
# ============================================================================
# ***.pro must be in $VIM_ROOT Or make sure g:asyncrun_rootmarkers
# includes `***.pro`
# ----------------------------------------------------------------------------
[qmake-init]
command=mkdir -p build && cd build && qmake .. && compiledb -n make && cp -f compile_commands.json ..
cwd=<root>
output=quickfix
silent=1
notify=echo
save=2

[qmake-reinit]
command=rm -rf build/ && mkdir -p build && cd build && qmake .. && compiledb -n make && cp -f compile_commands.json ..
cwd=<root>
output=quickfix
silent=1
notify=echo
save=2

[qmake-build]
command=cd build && make -j12
cwd=<root>
output=quickfix
silent=0
notify=echo
save=2

[qmake-run]
command="$(VIM_ROOT)/build/$(VIM_PRONAME)"
cwd=<root>
output=quickfix
silent=1
notify=echo
save=2

[qmake-build-and-run]
command=cd build && make -j12 && "$(VIM_ROOT)/build/$(VIM_PRONAME)"
cwd=<root>
# pos=tab
# focus=0
output=terminal
silent=1
notify=echo
save=2

[qmake-clean]
command=rm -rf build/
cwd=<root>
output=quickfix
silent=1
notify=echo
save=2

# ============================================================================
#                                   MISC
# ============================================================================
[grep]
command=rg -n --no-heading --color never "$(?keyword)" "<root>" -tc -tcpp -tpy -tvim -tgo
cwd=$(VIM_ROOT)
errorformat=%f:%l:%m

[ctags]
command=ctags -R -f tags .
cwd=$(VIM_ROOT)
silent=1

[compile_commands.json]
command=:execute(executable('compiledb') ? 'AsyncRun -cwd=<root> compiledb make' : 'AsyncRun -cwd=<root> bear make')
output=quickfix
silent=1
